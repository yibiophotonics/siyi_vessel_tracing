
# used for generating movie from frames recording the tracing process
# the frames are generated by the tracing algorithm
# this file is just for generating the video
# no need to read it if you want to know the tracing algorithm

import os
import imageio
from PIL import Image
import numpy as np
import cv2

filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/three_strategies/1_step/step1/all'
filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/for_video/1_step/step1/all'

count = 0
for filename in os.listdir(filepath):
    if filename.endswith(".png"):
        count += 1
# 0-159
count = 160

# (1050, 2100, 4)
# h = 1050 # as height
# w = 1050
h = 50 # as remove part
wl = 70
wr = 110
height_add = 30

# add title
title = Image.open('D:/Yi Lab/Tracing by DL/results/paper/video/text/title1.png')
title = np.asarray(title)
title = np.pad(title, ((0, 0), (0, 1), (0, 1)), 'constant', constant_values=255)
ht, wt, ct = title.shape

images_left = []
for i in range(count):
    filename = str(i) + '.png'
    pre = Image.open(os.path.join(filepath, filename))
    pre = np.asarray(pre)

    height, width, channel = pre.shape
    #decrease size
    pre = cv2.resize(pre, (int(height/4), int(width/4)), interpolation=cv2.INTER_AREA)

    height,width,channel = pre.shape

    # crop the image by center
    # pre = pre[int(np.round((height-h)/2)): int(np.round ((height+h)/2)), int(np.round((width-w)/2)):int((np.round (width+w)/2)), :]
    pre = pre[: int(height-h), int(wl):int(width-wr), :]


    pre = np.pad(pre, ((height_add, 0), (0,0), (0, 0)), 'constant', constant_values=255)
    height, width, channel = pre.shape
    pre[0: ht, int(np.round((width-wt)/2)):int((np.round (width+wt)/2)), :] = title

    # concat = np.concatenate((pre, pre,pre), axis=1)
    # plt.imshow(concat)
    # plt.show()


    images_left.append(pre)

# filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/three_strategies/1_step/step3/with'
filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/for_video/1_step/step3/with'

# add title
title = Image.open('D:/Yi Lab/Tracing by DL/results/paper/video/text/title2.png')
title = np.asarray(title)
title = np.pad(title, ((0, 0), (0, 1), (0, 1)), 'constant', constant_values=255)
ht, wt, ct = title.shape

images_center = []
for i in range(count):
    filename = str(i) + '.png'
    pre = Image.open(os.path.join(filepath, filename))
    pre = np.asarray(pre)

    height, width, channel = pre.shape
    #decrease size
    pre = cv2.resize(pre, (int(height/4), int(width/4)), interpolation=cv2.INTER_AREA)

    height,width,channel = pre.shape

    # crop the image by center
    # pre = pre[int(np.round((height-h)/2)): int(np.round ((height+h)/2)),700 : width - 200, :]
    pre = pre[: int(height-h), int(wl):int(width-wr), :]

    pre = np.pad(pre, ( (height_add, 0), (0, 0), (0, 0)), 'constant', constant_values=255)
    height, width, channel = pre.shape
    pre[0: ht, int(np.round((width-wt)/2)):int((np.round (width+wt)/2)), :] = title

    # append image
    images_center.append(pre)

# filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/three_strategies/1_step/step4/no'
filepath = 'D:/Yi Lab/Tracing by DL/results/Tracing_algorithm/predict/for_video/1_step/step4/no'

# add title
title = Image.open('D:/Yi Lab/Tracing by DL/results/paper/video/text/title3.png')
title = np.asarray(title)
title = np.pad(title, ((0, 0), (0, 1), (0, 1)), 'constant', constant_values=255)
ht, wt, ct = title.shape

images_right = []
for i in range(count):
    filename = str(i) + '.png'
    pre = Image.open(os.path.join(filepath, filename))
    pre = np.asarray(pre)

    height, width, channel = pre.shape
    #decrease size
    pre = cv2.resize(pre, (int(height/4), int(width/4)), interpolation=cv2.INTER_AREA)


    height,width,channel = pre.shape

    # crop the image by center
    # pre = pre[int(np.round((height-h)/2)): int(np.round ((height+h)/2)), int(np.round((width-w)/2)):int((np.round (width+w)/2)), :]
    pre = pre[: int(height-h), int(wl):int(width-wr), :]

    pre = np.pad(pre, ( (height_add, 0),(0,0), (0, 0)), 'constant', constant_values=255)
    height, width, channel = pre.shape
    pre[0: ht, int(np.round((width-wt)/2)):int((np.round (width+wt)/2)), :] = title

    images_right.append(pre)



# add title
title = Image.open('D:/Yi Lab/Tracing by DL/results/paper/video/text/title4.png')
title = np.asarray(title)
title = np.pad(title, ((0, 0), (0, 1), (0, 1)), 'constant', constant_values=255)
ht, wt, ct = title.shape

# concanate images_left and images_right
height_add = 120
images = []
for i in range(count):
    frame = np.concatenate((images_left[i], images_center[i], images_right[i]), axis=1)
    frame = np.pad(frame, ((height_add, 0), (0, 0), (0, 0)), 'constant', constant_values=255)

    # put title on it
    height, width, channel = frame.shape
    frame[0: ht, int(np.round((width-wt)/2)):int((np.round (width+wt)/2)), :] = title

    frame = np.pad(frame, ((20, 0), (0, 0), (0, 0)), 'constant', constant_values=255)

    images.append(frame)

    # show the image
    # plt.imshow(images[i])
    # plt.show()

fps = 50
# fps 50 / 30 = 1.67

filepath = 'D:/Yi Lab/Tracing by DL/results/paper/video'
videoname = filepath + '/output0209.mp4'

with imageio.get_writer(videoname,fps=fps) as video:
    for image in images:
        frame = np.array(image)
        # resizing from (2100, 1050,4) to (2112, 1056,4)
        # frame = np.pad(frame, ((3, 3), (6, 6), (0, 0)), 'constant', constant_values=0)

        # resizing from (1650, 2650) to (1664,2656)
        # frame = np.pad(frame, ((7, 7), (3, 3), (0, 0)), 'constant', constant_values=0)

        # resizing from (2835, 1245) to(2848, 1248)
        frame = np.pad(frame, ((1, 2), (1+5, 2+5), (0, 0)), 'constant', constant_values=0)
        for i in range(30):
            video.append_data(frame)

